# coding: utf-8

"""
    DeltaStream REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
from deltastream.api.controlplane.openapi_client.models.result_set import ResultSet
from deltastream.api.controlplane.openapi_client.models.result_set_metadata import ResultSetMetadata
from deltastream.api.controlplane.openapi_client.models.result_set_partition_info import ResultSetPartitionInfo
from deltastream.api.controlplane.openapi_client.models.result_set_columns_inner import ResultSetColumnsInner
from deltastream.api.controlplane.openapi_client.models.dataplane_request import DataplaneRequest
from deltastream.api.controlplane.openapi_client.models.result_set_context import ResultSetContext

class TestResultSet(unittest.TestCase):
    """ResultSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSet:
        """Test ResultSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return ResultSet(
                sql_state='',
                message='Test message',
                statement_id='stmt1',
                statement_ids=['stmt1', 'stmt2'],
                created_on=56,
                metadata=ResultSetMetadata(
                    encoding='json',
                    partition_info=[ResultSetPartitionInfo(row_count=10)],
                    columns=[ResultSetColumnsInner(name='col1', type='VARCHAR', nullable=True)],
                    dataplane_request=DataplaneRequest(token='token', uri='http://example.com', statement_id='stmt1', request_type='result-set'),
                    context=ResultSetContext(organization_id='org1', role_name='admin', database_name='db1', schema_name='public', store_name='store1')
                ),
                data=[[None]]
            )
        else:
            return ResultSet(
                sql_state='',
                statement_id='stmt1',
                created_on=56,
                metadata=ResultSetMetadata(encoding='json')
            )

    def testResultSet(self):
        """Test ResultSet"""
        inst = self.make_instance(include_optional=True)
        # Validate round-trip JSON conversion
        json_str = inst.to_json()
        inst_from_json = ResultSet.from_json(json_str)
        self.assertEqual(inst_from_json.created_on, inst.created_on)
        self.assertEqual(inst_from_json.metadata.encoding, inst.metadata.encoding)
        # ...additional assertions as needed...

if __name__ == '__main__':
    unittest.main()
