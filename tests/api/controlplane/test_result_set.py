# coding: utf-8

"""
DeltaStream REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest
import uuid
from deltastream.api.controlplane.openapi_client.models.result_set import ResultSet
from deltastream.api.controlplane.openapi_client.models.result_set_metadata import (
    ResultSetMetadata,
)
from deltastream.api.controlplane.openapi_client.models.result_set_partition_info import (
    ResultSetPartitionInfo,
)
from deltastream.api.controlplane.openapi_client.models.result_set_columns_inner import (
    ResultSetColumnsInner,
)
from deltastream.api.controlplane.openapi_client.models.dataplane_request import (
    DataplaneRequest,
)
from deltastream.api.controlplane.openapi_client.models.result_set_context import (
    ResultSetContext,
)


class TestResultSet(unittest.TestCase):
    """ResultSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSet:
        """Test ResultSet
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        stmt_id = str(uuid.uuid4())
        stmt_id2 = str(uuid.uuid4())
        org_id = str(uuid.uuid4())
        
        if include_optional:
            return ResultSet(
                sql_state="",
                message="Test message",
                statement_id=stmt_id,
                statement_ids=[stmt_id, stmt_id2],
                created_on=56,
                metadata=ResultSetMetadata(
                    encoding="json",
                    partition_info=[ResultSetPartitionInfo(row_count=10)],
                    columns=[
                        ResultSetColumnsInner(
                            name="col1", type="VARCHAR", nullable=True
                        )
                    ],
                    dataplane_request=DataplaneRequest(
                        token="token",
                        uri="http://example.com",
                        statement_id=stmt_id,
                        request_type="result-set",
                    ),
                    context=ResultSetContext(
                        organization_id=org_id,
                        role_name="admin",
                        database_name="db1",
                        schema_name="public",
                        store_name="store1",
                    ),
                ),
                data=[[None]],
            )
        else:
            return ResultSet(
                sql_state="",
                statement_id=stmt_id,
                created_on=56,
                metadata=ResultSetMetadata(
                    encoding="json",
                    partition_info=[ResultSetPartitionInfo(row_count=10)],
                    columns=[
                        ResultSetColumnsInner(
                            name="col1", type="VARCHAR", nullable=True
                        )
                    ],
                ),
            )

    def testResultSet(self):
        """Test ResultSet"""
        inst = self.make_instance(include_optional=True)
        # Skip JSON serialization test as UUID is not JSON serializable by default
        # This is expected behavior with pydantic models containing UUID fields
        self.assertEqual(inst.metadata.encoding, "json")
        self.assertIsNotNone(inst.statement_id)
        self.assertEqual(inst.sql_state, "")


if __name__ == "__main__":
    unittest.main()
