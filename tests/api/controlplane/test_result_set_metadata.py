# coding: utf-8

"""
DeltaStream REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from deltastream.api.controlplane.openapi_client.models.result_set_metadata import (
    ResultSetMetadata,
)
from deltastream.api.controlplane.openapi_client.models.result_set_partition_info import (
    ResultSetPartitionInfo,
)
from deltastream.api.controlplane.openapi_client.models.result_set_columns_inner import (
    ResultSetColumnsInner,
)
from deltastream.api.controlplane.openapi_client.models.dataplane_request import (
    DataplaneRequest,
)
from deltastream.api.controlplane.openapi_client.models.result_set_context import (
    ResultSetContext,
)


class TestResultSetMetadata(unittest.TestCase):
    """ResultSetMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSetMetadata:
        """Test ResultSetMetadata
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        if include_optional:
            return ResultSetMetadata(
                encoding="json",
                partition_info=[ResultSetPartitionInfo(row_count=10)],
                columns=[
                    ResultSetColumnsInner(name="col1", type="VARCHAR", nullable=True)
                ],
                dataplane_request=DataplaneRequest(
                    token="abc",
                    uri="http://example.com",
                    statement_id="stmt123",
                    request_type="result-set",
                ),
                context=ResultSetContext(
                    organization_id="org1",
                    role_name="admin",
                    database_name="db_main",
                    schema_name="public",
                    store_name="storeX",
                ),
            )
        else:
            return ResultSetMetadata(encoding="json")

    def testResultSetMetadata(self):
        """Test ResultSetMetadata"""
        inst = self.make_instance(include_optional=True)
        self.assertEqual(inst.encoding, "json")
        if inst.partition_info:
            self.assertEqual(inst.partition_info[0].row_count, 10)
        if inst.columns:
            self.assertEqual(inst.columns[0].name, "col1")
            self.assertEqual(inst.columns[0].type, "VARCHAR")
            self.assertTrue(inst.columns[0].nullable)
        if inst.dataplane_request:
            self.assertEqual(inst.dataplane_request.token, "abc")
        if inst.context:
            self.assertEqual(inst.context.organization_id, "org1")
        json_str = inst.to_json()
        inst_from_json = ResultSetMetadata.from_json(json_str)
        self.assertEqual(inst_from_json.encoding, inst.encoding)
        # ...additional field comparisons as needed...


if __name__ == "__main__":
    unittest.main()
