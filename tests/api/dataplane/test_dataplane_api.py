# coding: utf-8

"""
DeltaStream Dataplane REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest
import uuid
from unittest.mock import patch, Mock
from deltastream.api.dataplane.openapi_client.api.dataplane_api import DataplaneApi


class TestDataplaneApi(unittest.TestCase):
    """DataplaneApi unit test stubs"""

    def setUp(self) -> None:
        self.api = DataplaneApi()

    def tearDown(self) -> None:
        pass

    def test_get_statement_status(self) -> None:
        """Test get_statement_status returns expected result."""
        fake_response = Mock()
        fake_response.data = b'{"status": "running"}'
        fake_response.read.return_value = fake_response.data

        fake_deserialize = Mock()
        fake_deserialize.data = {"status": "running"}

        with patch.object(self.api.api_client, "call_api", return_value=fake_response):
            with patch.object(
                self.api.api_client,
                "response_deserialize",
                return_value=fake_deserialize,
            ):
                result = self.api.get_statement_status(
                    str(uuid.uuid4()), session_id="sess1", partition_id=0, timezone="UTC"
                )
                self.assertEqual(result, {"status": "running"})

    def test_get_version(self) -> None:
        """Test get_version returns expected version info."""
        fake_response = Mock()
        fake_response.data = b'{"version": "1.0.0"}'
        fake_response.read.return_value = fake_response.data

        fake_deserialize = Mock()
        fake_deserialize.data = {"version": "1.0.0"}

        with patch.object(self.api.api_client, "call_api", return_value=fake_response):
            with patch.object(
                self.api.api_client,
                "response_deserialize",
                return_value=fake_deserialize,
            ):
                result = self.api.get_version()
                self.assertEqual(result, {"version": "1.0.0"})

    def test_get_statement_status_error_404(self) -> None:
        """Test get_statement_status handles 404 error."""
        fake_response = Mock()
        fake_response.data = b'{"error": "Statement not found"}'
        fake_response.read.return_value = fake_response.data
        fake_response.status = 404

        with patch.object(self.api.api_client, "call_api", return_value=fake_response):
            with self.assertRaises(Exception) as context:
                self.api.get_statement_status(str(uuid.uuid4()), session_id="sess1")
            # Note: The actual exception message will depend on the validation error

    def test_get_statement_status_with_http_info(self) -> None:
        """Test get_statement_status_with_http_info returns full response."""
        fake_response = Mock()
        fake_response.data = b'{"status": "running"}'
        fake_response.read.return_value = fake_response.data
        fake_response.status = 200

        fake_deserialize = Mock()
        fake_deserialize.data = {"status": "running"}
        fake_deserialize.response = fake_response
        fake_deserialize.headers = {"Content-Type": "application/json"}

        with patch.object(self.api.api_client, "call_api", return_value=fake_response):
            with patch.object(
                self.api.api_client,
                "response_deserialize",
                return_value=fake_deserialize,
            ):
                result = self.api.get_statement_status_with_http_info(str(uuid.uuid4()))
                self.assertEqual(result.data, {"status": "running"})
                self.assertEqual(result.response.status, 200)

    def test_get_version_error_503(self) -> None:
        """Test get_version handles 503 service unavailable."""
        fake_response = Mock()
        fake_response.data = b'{"error": "Service unavailable"}'
        fake_response.read.return_value = fake_response.data
        fake_response.status = 503

        with patch.object(self.api.api_client, "call_api", return_value=fake_response):
            with self.assertRaises(Exception) as context:
                self.api.get_version()
            self.assertTrue("Service unavailable" in str(context.exception))

    def test_get_version_with_http_info(self) -> None:
        """Test get_version_with_http_info returns full response."""
        fake_response = Mock()
        fake_response.data = b'{"version": "1.0.0"}'
        fake_response.read.return_value = fake_response.data
        fake_response.status = 200

        fake_deserialize = Mock()
        fake_deserialize.data = {"version": "1.0.0"}
        fake_deserialize.response = fake_response
        fake_deserialize.headers = {"Content-Type": "application/json"}

        with patch.object(self.api.api_client, "call_api", return_value=fake_response):
            with patch.object(
                self.api.api_client,
                "response_deserialize",
                return_value=fake_deserialize,
            ):
                result = self.api.get_version_with_http_info()
                self.assertEqual(result.data, {"version": "1.0.0"})
                self.assertEqual(result.response.status, 200)
                self.assertEqual(result.headers["Content-Type"], "application/json")


if __name__ == "__main__":
    unittest.main()
