# coding: utf-8

"""
DeltaStream Dataplane REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from deltastream.api.dataplane.openapi_client.models.result_set_partition_info import (
    ResultSetPartitionInfo,
)


class TestResultSetPartitionInfo(unittest.TestCase):
    """ResultSetPartitionInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSetPartitionInfo:
        """Test ResultSetPartitionInfo
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        return ResultSetPartitionInfo(row_count=42)

    def testResultSetPartitionInfo(self):
        """Test ResultSetPartitionInfo basic functionality"""
        instance = self.make_instance(include_optional=False)
        self.assertEqual(instance.row_count, 42)

    def test_serialization(self):
        """Test ResultSetPartitionInfo serialization/deserialization"""
        data = ResultSetPartitionInfo(row_count=100)
        json_str = data.to_json()
        data_from_json = ResultSetPartitionInfo.from_json(json_str)
        self.assertEqual(data.row_count, data_from_json.row_count)

    def test_dict_conversion(self):
        """Test ResultSetPartitionInfo to/from dict conversion"""
        data = ResultSetPartitionInfo(row_count=50)
        data_dict = data.to_dict()
        data_from_dict = ResultSetPartitionInfo.from_dict(data_dict)
        self.assertEqual(data.row_count, data_from_dict.row_count)
        self.assertEqual(data_dict["rowCount"], 50)

    def test_validation(self):
        """Test ResultSetPartitionInfo validation rules"""
        # Test negative row count
        with self.assertRaises(ValueError):
            ResultSetPartitionInfo(row_count=-1)

        # Test non-integer row count
        with self.assertRaises(ValueError):
            ResultSetPartitionInfo(row_count=3.14)

    def test_none_value(self):
        """Test ResultSetPartitionInfo with None value for from_dict"""
        result = ResultSetPartitionInfo.from_dict(None)
        self.assertIsNone(result)

    def test_invalid_dict(self):
        """Test ResultSetPartitionInfo with invalid dict input"""
        with self.assertRaises(ValueError):
            ResultSetPartitionInfo.from_dict({"rowCount": "not_an_integer"})


if __name__ == "__main__":
    unittest.main()
