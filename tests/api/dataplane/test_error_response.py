# coding: utf-8

"""
    DeltaStream Dataplane REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from deltastream.api.dataplane.openapi_client.models.error_response import ErrorResponse

class TestErrorResponse(unittest.TestCase):
    """ErrorResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ErrorResponse:
        """Test ErrorResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # Create an instance of ErrorResponse with required (and optional) fields.
        if include_optional:
            return ErrorResponse(message='An error occurred')
        else:
            return ErrorResponse(message='An error occurred')

    def testErrorResponse(self):
        """Test ErrorResponse basic functionality"""
        inst_req = self.make_instance(include_optional=False)
        self.assertEqual(inst_req.message, 'An error occurred')

    def test_error_response_serialization(self):
        """Test ErrorResponse serialization/deserialization"""
        error = ErrorResponse(message='Test error message')
        json_str = error.to_json()
        error_from_json = ErrorResponse.from_json(json_str)
        self.assertEqual(error.message, error_from_json.message)

    def test_error_response_dict_conversion(self):
        """Test ErrorResponse to/from dict conversion"""
        error = ErrorResponse(message='Dict conversion test')
        error_dict = error.to_dict()
        error_from_dict = ErrorResponse.from_dict(error_dict)
        self.assertEqual(error.message, error_from_dict.message)
        self.assertIsInstance(error_dict, dict)

    def test_error_response_validation(self):
        """Test ErrorResponse validation"""
        with self.assertRaises(ValueError):
            ErrorResponse(message=None)  # type: ignore
        
        with self.assertRaises(ValueError):
            ErrorResponse(message=123)  # type: ignore

    def test_error_response_from_dict_none(self):
        """Test ErrorResponse.from_dict with None input"""
        self.assertIsNone(ErrorResponse.from_dict(None))

    def test_error_response_string_representation(self):
        """Test ErrorResponse string representation"""
        error = ErrorResponse(message='Test message')
        str_repr = error.to_str()
        self.assertIsInstance(str_repr, str)
        self.assertIn('Test message', str_repr)

if __name__ == '__main__':
    unittest.main()
