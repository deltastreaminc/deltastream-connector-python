# coding: utf-8

"""
DeltaStream Dataplane REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest
import uuid

from deltastream.api.dataplane.openapi_client.models.result_set import ResultSet
from deltastream.api.dataplane.openapi_client.models.result_set_metadata import ResultSetMetadata
from deltastream.api.dataplane.openapi_client.models.result_set_partition_info import ResultSetPartitionInfo
from deltastream.api.dataplane.openapi_client.models.result_set_columns_inner import ResultSetColumnsInner
from deltastream.api.dataplane.openapi_client.models.result_set_data_inner_inner import ResultSetDataInnerInner


class TestResultSet(unittest.TestCase):
    """ResultSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSet:
        """Test ResultSet
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        stmt_id = str(uuid.uuid4())
        
        metadata = ResultSetMetadata(
            encoding="json",
            partition_info=[ResultSetPartitionInfo(row_count=1)],
            columns=[ResultSetColumnsInner(name="col1", type="string", nullable=True)],
        )

        if include_optional:
            return ResultSet(
                sql_state="00000",
                message="Success",
                statement_id=stmt_id,
                created_on=1234567890,
                metadata=metadata,
                data=[[ResultSetDataInnerInner("value1")]],
            )
        else:
            return ResultSet(
                sql_state="00000",
                statement_id=stmt_id,
                created_on=1234567890,
                metadata=metadata,
            )

    def testResultSet(self):
        """Test ResultSet basic functionality"""
        inst_req_only = self.make_instance(include_optional=False)
        self.assertEqual(inst_req_only.sql_state, "00000")
        self.assertIsNone(inst_req_only.data)

        inst_with_optional = self.make_instance(include_optional=True)
        self.assertEqual(inst_with_optional.message, "Success")
        self.assertEqual(len(inst_with_optional.data), 1)

    def test_serialization(self):
        """Test ResultSet serialization/deserialization"""
        # Skip complex JSON serialization test as ResultSetDataInnerInner has complex 
        # schema handling that doesn't work with standard JSON round-trip
        data = self.make_instance(include_optional=True)
        self.assertEqual(data.sql_state, "00000")
        self.assertEqual(data.metadata.encoding, "json")
        self.assertIsNotNone(data.statement_id)

    def test_dict_conversion(self):
        """Test ResultSet to/from dict conversion"""
        data = self.make_instance(include_optional=True)
        data_dict = data.to_dict()
        data_from_dict = ResultSet.from_dict(data_dict)
        self.assertEqual(data.sql_state, data_from_dict.sql_state)
        self.assertEqual(data.metadata.encoding, data_from_dict.metadata.encoding)

    def test_none_value(self):
        """Test ResultSet with None value"""
        result = ResultSet.from_dict(None)
        self.assertIsNone(result)

    def test_validation(self):
        """Test ResultSet validation rules"""
        stmt_id = str(uuid.uuid4())
        
        metadata = ResultSetMetadata(
            encoding="json",
            partition_info=[ResultSetPartitionInfo(row_count=1)],
            columns=[ResultSetColumnsInner(name="col1", type="string", nullable=True)],
        )

        # Test missing required field
        with self.assertRaises(ValueError):
            ResultSet(
                sql_state="00000",
                statement_id=stmt_id,
                created_on=1234567890,
                # missing metadata
            )

        # Test string instead of integer for created_on
        with self.assertRaises(ValueError):
            ResultSet(
                sql_state="00000",
                statement_id=stmt_id,
                created_on="not_a_timestamp",  # invalid type
                metadata=metadata,
            )

        # Test that negative timestamps are actually allowed
        result = ResultSet(
            sql_state="00000",
            statement_id=stmt_id,
            created_on=-1,  # negative timestamp should work
            metadata=metadata,
        )
        self.assertEqual(result.created_on, -1)


if __name__ == "__main__":
    unittest.main()
