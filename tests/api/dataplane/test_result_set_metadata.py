# coding: utf-8

"""
DeltaStream Dataplane REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from deltastream.api.dataplane.openapi_client.models.result_set_metadata import (
    ResultSetMetadata,
)


class TestResultSetMetadata(unittest.TestCase):
    """ResultSetMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSetMetadata:
        if include_optional:
            return ResultSetMetadata(
                encoding="json",
                partition_info=[{"row_count": 100}],
                columns=[{"name": "test_column", "type": "string", "nullable": True}],
            )
        else:
            return ResultSetMetadata(
                encoding="json",
                partition_info=[{"row_count": 100}],
                columns=[{"name": "test_column", "type": "string", "nullable": True}],
            )

    def testResultSetMetadata(self):
        """Test ResultSetMetadata basic functionality"""
        inst_req = self.make_instance(include_optional=False)
        self.assertEqual(inst_req.encoding, "json")
        self.assertEqual(len(inst_req.partition_info), 1)
        self.assertEqual(len(inst_req.columns), 1)

    def test_metadata_serialization(self):
        """Test ResultSetMetadata serialization/deserialization"""
        metadata = self.make_instance(include_optional=True)
        json_str = metadata.to_json()
        metadata_from_json = ResultSetMetadata.from_json(json_str)
        self.assertEqual(metadata.encoding, metadata_from_json.encoding)
        self.assertEqual(len(metadata.columns), len(metadata_from_json.columns))

    def test_metadata_dict_conversion(self):
        """Test ResultSetMetadata to/from dict conversion"""
        metadata = self.make_instance(include_optional=True)
        metadata_dict = metadata.to_dict()
        metadata_from_dict = ResultSetMetadata.from_dict(metadata_dict)
        self.assertEqual(metadata.encoding, metadata_from_dict.encoding)
        self.assertIsInstance(metadata_dict, dict)

    def test_metadata_validation(self):
        """Test ResultSetMetadata validation"""
        with self.assertRaises(ValueError):
            ResultSetMetadata(encoding=None, partition_info=[], columns=[])  # type: ignore

        with self.assertRaises(ValueError):
            ResultSetMetadata(encoding="json", partition_info=None, columns=[])  # type: ignore


if __name__ == "__main__":
    unittest.main()
